#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shellmoney:server');
var http = require('http');
var https = require('https');
var fs = require("fs");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.SHELLMONEY_PORT || '12000');
var https_port = normalizePort(process.env.SHELLMONEY_HTTPS_PORT || '12000');
console.log("Port: " + port);
app.set('port', port);

/**
 * Create HTTP & HTTPS server.
 */

// via https://stackoverflow.com/questions/5998694/how-to-create-an-https-server-in-node-js
try {
  //if (0 === 0)
  //  return Error ('Will not use HTTPS. This isn\'t really an error to be honest...')
  console.log("Trying to set up HTTPS Shellmoney server.")
  var key_file = process.env.SHELLMONEY_HTTPS_KEYFILE
  var cert_file = process.env.SHELLMONEY_HTTPS_CERTFILE
  var options = {
    key: fs.readFileSync(key_file.toString()),
    cert: fs.readFileSync(cert_file.toString())
  };
  var secure_server = https.createServer(options, app);
  secure_server.listen(port);
  secure_server.on('error', onError);
  console.log("HTTPS Server started successfully.")
} catch (error)
{
  console.log("ERROR:")
  console.log(error)
  console.log("")
  console.log("Starting HTTPS Shellmoney server failed. Did you provide the env. variables for the key- & cert-file?")
  console.log("--> Running HTTP Shellmoney server only.")
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}






/**
 * Listen on provided port, on all network interfaces.
 */



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
